name: Build and Release

on:
  push:
    tags:
      - 'v*' # 触发条件：当一个以 'v' 开头的标签被推送时

permissions:
  contents: write
  packages: write

jobs:
  build-and-upload:
    strategy:
      matrix:
        include:
          # - os: ubuntu-latest
          #   goos: linux
          #   goarch: amd64
          #   asset_name_suffix: ""
          #   rust_target: x86_64-unknown-linux-gnu
          # - os: ubuntu-latest
          #   goos: linux
          #   goarch: arm64
          #   asset_name_suffix: ""
          #   rust_target: aarch64-unknown-linux-gnu
          - os: macos-latest
            goos: darwin
            goarch: amd64
            asset_name_suffix: ""
            rust_target: x86_64-apple-darwin
          - os: macos-latest
            goos: darwin
            goarch: arm64
            asset_name_suffix: ""
            rust_target: aarch64-apple-darwin
          - os: windows-latest
            goos: windows
            goarch: amd64
            asset_name_suffix: .exe
            rust_target: x86_64-pc-windows-gnu
          # Windows ARM64 is more complex to set up for Rust cross-compilation, skipping for now.
          # - os: windows-latest
          #   goos: windows
          #   goarch: arm64
          #   asset_name_suffix: .exe
          #   rust_target: aarch64-pc-windows-msvc # or gnu
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set UTF-8 Locale
        run: |
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV
          echo "LANGUAGE=en_US.UTF-8" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.rust_target }} # Ensure the target for cross-compilation is installed

      - name: Install MinGW-w64 for Windows GNU target
        if: matrix.goos == 'windows'
        shell: bash
        run: |
          echo "Installing MinGW-w64 for Windows GNU target..."
          # Install MSYS2 which provides a complete MinGW-w64 toolchain
          choco install msys2 -y

          # Update MSYS2 and install MinGW-w64 toolchain
          C:/tools/msys64/usr/bin/bash.exe -lc "pacman -Syu --noconfirm"
          C:/tools/msys64/usr/bin/bash.exe -lc "pacman -S --noconfirm mingw-w64-x86_64-toolchain"

          # Add MinGW-w64 to PATH
          echo "C:/tools/msys64/mingw64/bin" >> $GITHUB_PATH

          # Verify installation
          echo "Verifying MinGW-w64 installation..."
          ls -la "C:/tools/msys64/mingw64/bin/" | grep -E "(gcc|g\+\+|ar)\.exe" || echo "Some tools not found"



      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install requests

      - name: Run download_onnxruntime.py
        run: python download_onnxruntime.py
        # IMPORTANT: This script (located at backend/Go/Git/download_onnxruntime.py) MUST correctly
        # download and place libraries for the specific GOOS/GOARCH into the paths expected by the
        # Makefile (backend/Go/Git/Makefile).
        # It should NOT download libtokenizers.a as we are building it from source.

      - name: Build tokenizers library
        shell: bash
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Building tokenizer for GOOS=${{ matrix.goos }}, GOARCH=${{ matrix.goarch }}, RUST_TARGET=${{ matrix.rust_target }}"

          TOKENIZERS_REPO_DIR=../tokenizers_src_temp # Temporary directory for cloning

          echo "Cloning Evyde/tokenizers..."
          git clone --depth 1 https://github.com/Evyde/tokenizers.git $TOKENIZERS_REPO_DIR
          cd $TOKENIZERS_REPO_DIR

          echo "Building libtokenizers with Cargo for target ${{ matrix.rust_target }}..."

          # For Windows, set specific environment for GNU toolchain
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            echo "Setting Windows-specific Rust build environment for GNU toolchain..."
            # Use MinGW-w64 GNU toolchain for compatibility with Go's linker
            export CC=x86_64-w64-mingw32-gcc
            export CXX=x86_64-w64-mingw32-g++
            export AR=x86_64-w64-mingw32-ar
            export RUSTFLAGS="-C target-feature=+crt-static -C linker=x86_64-w64-mingw32-gcc"

            # Verify tools are available
            echo "Verifying GNU toolchain..."
            which x86_64-w64-mingw32-gcc || echo "gcc not found"
            which x86_64-w64-mingw32-g++ || echo "g++ not found"
            which x86_64-w64-mingw32-ar || echo "ar not found"
          fi

          cargo build --release --target ${{ matrix.rust_target }}

          # Determine the correct library file extension and name based on target
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            LIB_EXTENSION="lib"
            LIB_PREFIX=""
            SOURCE_LIB_NAME="tokenizers.lib"
          else
            LIB_EXTENSION="a"
            LIB_PREFIX="lib"
            SOURCE_LIB_NAME="libtokenizers.a"
          fi

          SOURCE_LIB_PATH="target/${{ matrix.rust_target }}/release/${SOURCE_LIB_NAME}"
          DEST_DIR="${{ github.workspace }}/libtokenizers/${{ matrix.goos }}_${{ matrix.goarch }}"
          DEST_LIB_PATH="$DEST_DIR/${SOURCE_LIB_NAME}"

          echo "Source library path: $SOURCE_LIB_PATH"
          echo "Destination directory: $DEST_DIR"

          # Check for alternative library names if the primary one doesn't exist
          if [ ! -f "$SOURCE_LIB_PATH" ]; then
            echo "Primary library not found, checking alternatives..."
            if [[ "${{ matrix.goos }}" == "windows" ]]; then
              # Try .lib and .a extensions for Windows
              for alt_name in "libtokenizers.lib" "tokenizers.lib" "libtokenizers.a"; do
                alt_path="target/${{ matrix.rust_target }}/release/${alt_name}"
                if [ -f "$alt_path" ]; then
                  SOURCE_LIB_PATH="$alt_path"
                  SOURCE_LIB_NAME="$alt_name"
                  DEST_LIB_PATH="$DEST_DIR/${alt_name}"
                  echo "Found alternative: $SOURCE_LIB_PATH"
                  break
                fi
              done
            fi
          fi

          if [ ! -f "$SOURCE_LIB_PATH" ]; then
            echo "Build failed: No suitable library found!"
            echo "Contents of target/${{ matrix.rust_target }}/release/:"
            ls -la "target/${{ matrix.rust_target }}/release/" || echo "Directory not found"
            exit 1
          fi

          echo "Creating destination directory: $DEST_DIR"
          mkdir -p "$DEST_DIR"

          echo "Copying $SOURCE_LIB_PATH to $DEST_LIB_PATH"
          cp "$SOURCE_LIB_PATH" "$DEST_LIB_PATH"

          echo "Successfully built and copied ${SOURCE_LIB_NAME}"
          cd ../.. # Return to original directory or a known base for next steps

      - name: Debug Windows build environment
        if: matrix.goos == 'windows'
        shell: bash
        run: |
          chmod +x debug-windows.sh
          ./debug-windows.sh

      - name: Verify build environment (Non-Windows)
        if: matrix.goos != 'windows'
        shell: bash
        run: |
          echo "=== Build Environment Verification ==="
          echo "OS: ${{ matrix.os }}"
          echo "GOOS: ${{ matrix.goos }}"
          echo "GOARCH: ${{ matrix.goarch }}"
          echo "Rust target: ${{ matrix.rust_target }}"

          echo "Go version:"
          go version

          echo "CGO environment:"
          go env CGO_ENABLED

          echo "Checking required directories:"
          ls -la ./libtokenizers/${{ matrix.goos }}_${{ matrix.goarch }}/ || echo "Tokenizers directory not found"
          ls -la ./onnxruntime/ || echo "ONNX Runtime directory not found"

      - name: Get CGO_LDFLAGS (Unix-like)
        if: matrix.os != 'windows-latest'
        id: cgo_ldflags_unix
        run: |
          LDFLAGS_VALUE=$(make -s print-cgo-ldflags)
          echo "Extracted CGO_LDFLAGS: $LDFLAGS_VALUE"
          echo "cgo_ldflags_value=$LDFLAGS_VALUE" >> $GITHUB_OUTPUT
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Get CGO_LDFLAGS (Windows)
        if: matrix.os == 'windows-latest'
        id: cgo_ldflags_windows
        shell: bash
        run: |
          LDFLAGS_VALUE=$(make -s print-cgo-ldflags)
          echo "Original CGO_LDFLAGS from make: $LDFLAGS_VALUE"
          # Remove problematic flags for Windows
          LDFLAGS_VALUE_CLEANED=$(echo "$LDFLAGS_VALUE" | sed 's/-ldl//g' | sed 's/--exclude-libs,dl//g' | sed 's/  */ /g' | sed 's/^ *//' | sed 's/ *$//')
          echo "Cleaned CGO_LDFLAGS: $LDFLAGS_VALUE_CLEANED"
          echo "cgo_ldflags_value=$LDFLAGS_VALUE_CLEANED" >> $GITHUB_OUTPUT
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Build application for ${{ matrix.goos }}/${{ matrix.goarch }} (Windows)
        if: matrix.goos == 'windows'
        shell: bash
        run: |
          echo "Building Windows application with GNU-compatible tokenizers..."

          # Create output directory
          mkdir -p bin

          # Set up GNU toolchain environment for CGO
          echo "Setting up GNU toolchain for CGO..."
          export CC=x86_64-w64-mingw32-gcc
          export CXX=x86_64-w64-mingw32-g++

          # Add static linking flags for C++ standard library to avoid runtime dependencies
          echo "Using CGO_LDFLAGS: $CGO_LDFLAGS"
          STATIC_LDFLAGS="$CGO_LDFLAGS -static-libgcc -static-libstdc++"
          echo "Enhanced CGO_LDFLAGS with static linking: $STATIC_LDFLAGS"

          # Build the application with GNU toolchain
          CGO_LDFLAGS="$STATIC_LDFLAGS" go build -o bin/MathReX-windows-amd64.exe ./

          echo "✓ Windows build completed with GNU toolchain"
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          CGO_LDFLAGS: ${{ steps.cgo_ldflags_windows.outputs.cgo_ldflags_value }}

      - name: Build application for ${{ matrix.goos }}/${{ matrix.goarch }} (Non-Windows)
        if: matrix.goos != 'windows'
        shell: bash
        run: |
          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}..."
          echo "CGO_LDFLAGS: $CGO_LDFLAGS"

          if [ "${{ matrix.goos }}" == "darwin" ]; then
            echo "Building macOS .app bundle..."
            make build-macos-app
          else
            echo "Building standard binary..."
            make build
          fi

          echo "✓ Build completed successfully"
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.goos == 'darwin' && '10.15' || '' }}
          CGO_ENABLED: 1
          CGO_LDFLAGS: ${{ steps.cgo_ldflags_unix.outputs.cgo_ldflags_value }}

      - name: Add executable permissions (Linux/non-App macOS)
        if: (matrix.goos == 'linux') || (matrix.goos == 'darwin' && matrix.asset_name_suffix != '.zip')
        run: chmod +x bin/MathReX-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Package macOS .app into a .zip
        if: matrix.goos == 'darwin'
        run: |
          cd bin
          zip -r MathReX-${{ matrix.goos }}-${{ matrix.goarch }}.zip MathReX.app
          cd ..
        # The asset_name_suffix for darwin should now reflect .zip

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ${{ matrix.goos == 'darwin' && format('bin/MathReX-{0}-{1}.zip', matrix.goos, matrix.goarch) || format('bin/MathReX-{0}-{1}{2}', matrix.goos, matrix.goarch, matrix.asset_name_suffix) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
